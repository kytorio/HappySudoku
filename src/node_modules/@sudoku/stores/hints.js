import { settings } from './settings';
import { writable } from 'svelte/store';
import { solveSudokuTest } from '@sudoku/sudoku';
import { userGrid, strategyGrid, referenceGrid, strategyContent } from '@sudoku/stores/grid';
import { candidates } from '@sudoku/stores/candidates';

export const usedHints = writable(0);

function createHints() {
    let defaultHints = Infinity;

    const hints = writable(Infinity);

    settings.subscribe(($settings) => {	//更新设置
        if ($settings.hintsLimited) {	//检测是否还有提示次数
            defaultHints = $settings.hints;
            hints.update($hints => {
                if ($hints > $settings.hints) return $settings.hints;

                return $hints;
            })
        } else {
            defaultHints = Infinity;
            hints.set(Infinity);
        }
    });

    return {
        subscribe: hints.subscribe,

        useHint() {
            hints.update($hints => {
                if ($hints > 0) {
                    usedHints.update($usedHints => $usedHints + 1);
                    return $hints - 1;
                }

                return 0;
            });
        },

        reset() {
            hints.set(defaultHints);
            usedHints.set(0);
        }
    };
}

export const hints = createHints();

export const clickNum = writable(0);
// export let clickNum = 0;
// export let maxLevel = 3;
// export let level = 0;
// settings.subscribe(($settings) => {
//     level = $settings.minhintlevelateachstep;
// });

// export function reset(same) {
//     // console.log(111);
//     // console.log(clickNum);
//     // console.log(same);
//     clickNum = 0;
//     userGrid.subscribe($userGrid => {
//         $userGrid.forEach((row, rowIndex) => {
//             row.forEach((cell, colIndex) => {
//                 candidates.clear({x: colIndex, y: rowIndex});	
//             });
//         });
//         if (!same) {
//             localStorage.setItem('userGrid', JSON.stringify($userGrid));
//             $userGrid.forEach((row, rowIndex) => {
//                 row.forEach((cell, colIndex) => {
//                     // hintGrid.clear({x: rowIndex, y: colIndex});	
//                     strategyGrid.clear({x: rowIndex, y: colIndex});	
//                     referenceGrid.clear({x: rowIndex, y: colIndex});	
//                 });
//                 strategyContent.clear();
//             });
//         }
//         return $userGrid;
//     });
// }

// export function solve() {
//     // console.log(222);
// 	// console.log(level);
//     // console.log(clickNum);
//     // console.log(possibleNumbers);
//     // console.log(referenceNumbers);
//     // console.log(strategy);
//     userGrid.subscribe($userGrid => {
// 		let [possibleNumbers, referenceNumbers, strategy] = solveSudokuTest($userGrid);

//         $userGrid.forEach((row, rowIndex) => {
//             row.forEach((cell, colIndex) => {
//                 candidates.clear({x: colIndex, y: rowIndex});	
//             });
//         });
//         let res = JSON.parse(JSON.stringify(possibleNumbers));

// 		console.log(level);
// 		console.log(clickNum);

//         res.forEach((row, rowIndex) => {
//             row.forEach((element, colIndex) => {
//                 // console.log(rowIndex, colIndex);
//                 if (element.length > level + clickNum) {
//                     res[rowIndex][colIndex] = [];
//                     referenceNumbers[rowIndex][colIndex] = [];
//                     strategy[rowIndex][colIndex] = "";
//                 } else {
//                     element.forEach(value => {
//                         candidates.add({ x: colIndex, y: rowIndex }, value);
//                     });
//                 }
//             });
//         });
//         strategy.forEach((row, rowIndex) => {
//             row.forEach((element, colIndex) => {
//                 strategyGrid.set({x: rowIndex, y: colIndex}, element);
//             });
//         });
//         referenceNumbers.forEach((row, rowIndex) => {
//             row.forEach((element, colIndex) => {
//                 referenceGrid.set({x: rowIndex, y: colIndex}, element);
//             });
//         });
//         clickNum += 1;
//         return $userGrid;
//     });
// }